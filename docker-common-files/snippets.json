{
    "snippets" : [
        {
            "name" : "Numpy setup",
            "code" : [
                "import numpy as np"
            ]
        },
        {
            "name" : "Creating a NumPy array",
            "code" : [
                "import numpy as np",
                "# Create an array from a list",
                "my_list = [1, 2, 3, 4, 5]",
                "my_array = np.array(my_list)",
                "",
                "# Create an array with specified dimensions",
                "my_array = np.zeros((3, 4))  # creates a 3x4 array of zeros",
                "my_array = np.ones((2, 2))   # creates a 2x2 array of ones"

            ]
        },
        {
            "name" : "Accessing array elements",
            "code" : [
                "# Accessing single elements",
                "my_array[0]            # returns the first row",
                "my_array[1][2]         # returns the element in the second row, third column",
                "",
                "# Slicing arrays",
                "my_array[1:3]          # returns rows 2-3",
                "my_array[:, 2]         # returns the third column",
                "my_array[1:, :2]       # returns rows 2-end, columns 1-2"
            ]
        },
        {
            "name" : "Calculations with NumPy",
            "code" : [
                "# Basic mathematical operations",
                "np.add(my_array, 2)       # adds 2 to each element in the array",
                "np.multiply(my_array, 2)  # multiplies each element in the array by 2",
                "np.sqrt(my_array)         # returns the square root of each element in the array",
                "",
                "# Advanced mathematical operations",
                "np.sum(my_array)         # returns the sum of all elements in the array",
                "np.mean(my_array)        # returns the mean of all elements in the array",
                "np.std(my_array)         # returns the standard deviation of all elements in the array"
            ]

        },
        {
            "name" : "Pandas setup",
            "code" : [
                "import pandas as pd"
            ]
        },
        {
            "name" : "pandas set options",
            "code"  : [
                "import pandas as pd",
                "pd.set_option('display.height', 10)",
                "pd.set_option('display.max_rows', 20)",
                "pd.set_option('display.max_columns', 500)",
                "pd.set_option('display.width', 1000)"
            ]
        },
        {
            "name" : "Pandas read from CSV",
            "code"  : [
                "import pandas as pd",
                "df = pd.read_csv('file.csv')",
                "df.head() #Displaying the first few rows of the DataFrame",
                "df[['column1', 'column2']] #Selecting specific columns",
                "df[df['column'] > 5] #Filtering rows based on a condition",
                "df.groupby('column').mean() #Aggregating data using groupby",
                "df.sort_values(by='column') #Sorting data",
                "df['new_column'] = df['column1'] + df['column2'] #Adding a new column",
                "df.drop(['column1', 'column2'], axis=1, inplace=True) #Dropping columns",
                "df.rename(columns={'old_column': 'new_column'}, inplace=True) #Renaming columns",
                "df.dropna() # drop rows with missing values",
                "df.fillna(0) # fill missing values with 0"
            ]
        },

        {
            "name" : "Pandas write to CSV",
            "code" : [
                "import pandas as pd",
                "df = pd.read_csv('file.csv')",
                "df.to_csv('output_file.csv', index=False)",
                "df.to_csv('output_file.csv', index=False, sep='\t') #Writing a DataFrame to a CSV file with a specific delimiter",
                "df.to_csv('output_file.csv', index=False, encoding='utf-8') #Writing a DataFrame to a CSV file with specific encoding",
                "df.to_csv('output_file.csv', index=False, columns=['column1', 'column2', 'column3']) #Writing a DataFrame to a CSV file with specific column order",
                "df.to_csv('output_file.csv', mode='a', header=False, index=False) #Appending a DataFrame to an existing CSV file"
                ]
        },
        {
            "name" : "Matplotlib setup",
            "code"  : [
                "import matplotlib as mpl",
                "import matplotlib.pyplot as plt",
                "%matplotlib inline"  
            ]
        },
        {
            "name" : "Basic line plot",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "",
                "#sample data",
                "x = [1, 2, 3, 4, 5]",
                "y = [2, 4, 6, 8, 10]",
                "plt.plot(x, y)",
                "plt.title('Title')",
                "plt.xlabel('X Label')",
                "plt.ylabel('Y Label')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        },
        {
            "name" : "Scatter plot",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "",
                "#sample data",
                "x = [1, 2, 3, 4, 5]",
                "y = [2, 4, 6, 8, 10]",
                "plt.scatter(x, y)",
                "plt.title('Title')",
                "plt.xlabel('X Label')",
                "plt.ylabel('Y Label')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        },
        {
            "name" : "Bar chart",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "",
                "#sample data",
                "x = ['A', 'B', 'C', 'D', 'E']",
                "y = [2, 4, 6, 8, 10]",
                "plt.bar(x, y)",
                "plt.title('Title')",
                "plt.xlabel('X Label')",
                "plt.ylabel('Y Label')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        },
        {
            "name" : "Pie chart",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "",
                "#sample data",
                "labels = ['A', 'B', 'C', 'D', 'E']",
                "sizes = [2, 4, 6, 8, 10]",
                "plt.pie(sizes, labels=labels)",
                "plt.title('Title')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        },
        {
            "name" : "Histogram",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "import numpy as np",
                "",
                "data = np.random.normal(0, 1, 1000) # generate 1000 normally distributed random numbers",
                "plt.hist(data)",
                "plt.title('Title')",
                "plt.xlabel('X Label')",
                "plt.ylabel('Y Label')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        },
        {
            "name" : "Creating subplots",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "",
                "#sample data",
                "x = [1, 2, 3, 4, 5]",
                "y = [2, 4, 6, 8, 10]",
                "fig, axs = plt.subplots(2, 2)",
                "axs[0, 0].plot(x, y)",
                "axs[0, 0].set_title('Plot 1')",
                "axs[0, 1].scatter(x, y)",
                "axs[0, 1].set_title('Plot 2')",
                "axs[1, 0].bar(x, y)",
                "axs[1, 0].set_title('Plot 3')",
                "axs[1, 1].pie(y, labels=x)",
                "axs[1, 1].set_title('Plot 4')",
                "",
                "# Show the plot",
                "plt.show()"
                
            ]
        },

        {
            "name" : "Contour plot",
            "code"  : [
                "import matplotlib.pyplot as plt",
                "import numpy as np",
                "",
                "# Generate some data to plot",
                "x = np.linspace(-5, 5, 101)",
                "y = np.linspace(-5, 5, 101)",
                "X, Y = np.meshgrid(x, y)",
                "Z = np.sin(X) + np.cos(Y)",
                "",
                "# Create the contour plot",
                "plt.contour(X, Y, Z)",
                "",
                "# Add some labels and a title",
                "plt.xlabel('X')",
                "plt.ylabel('Y')",
                "plt.title('Contour Plot')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        },
        {
            "name" : "3-d plot",
            "code" :[
                "import matplotlib.pyplot as plt",
                "import numpy as np",
                "from mpl_toolkits.mplot3d import Axes3D",
                "",
                "# Generate some data to plot",
                "x = np.linspace(-5, 5, 101)",
                "y = np.linspace(-5, 5, 101)",
                "X, Y = np.meshgrid(x, y)",
                "Z = np.sin(np.sqrt(X**2 + Y**2))",
                "",
                "# Create the 3D plot",
                "fig = plt.figure()",
                "ax = fig.add_subplot(111, projection='3d')",
                "ax.plot_surface(X, Y, Z)",
                "",
                "# Add some labels and a title",
                "ax.set_xlabel('X')",
                "ax.set_ylabel('Y')",
                "ax.set_zlabel('Z')",
                "plt.title('3D Plot')",
                "",
                "# Show the plot",
                "plt.show()"
            ]
        }      
    ]
}